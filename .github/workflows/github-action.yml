name: github-action

on:
  push:
    paths:
      - '**.java'
  pull_request:
    paths:
      - '**.java'

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-properties.yml
        if: contains(github.ref, 'main')
        run: |
          pwd
          cd src/main/resources/
          touch ./application.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Docker Image Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_REPOSITORY_TAG_NAME }}

      - name: Copy Deployment Files to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
          script: |
            whoami

      - name: Docker Container Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_HOST }}
          username: ${{ secrets.EC2_INSTANCE_USERNAME }}
          key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
          script: |
            # 현재 실행 중인 컨테이너 확인
            CURRENT_CONTAINER=$(docker ps -q --filter "name=server")
            if [ -n "$CURRENT_CONTAINER" ]; then
              docker stop "$CURRENT_CONTAINER"
              docker rm "$CURRENT_CONTAINER"
            fi
            # 기존에 사용한 이름으로 prune을 수행하여 이전 컨테이너 및 이미지 삭제
            docker container prune -f
            docker image prune -a -f
            # 새로운 컨테이너 실행
            docker pull ${{ secrets.DOCKER_HUB_REPOSITORY_TAG_NAME }}
            cd /home/${{ secrets.EC2_INSTANCE_USERNAME }}/app/sokuri
            docker-compose up -d
            docker image prune -f